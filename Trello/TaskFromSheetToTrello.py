"""
Created on Sun Feb 16 01:35:00 2020

@description Read Google sheet data & write in Trello
@author Richard
"""
#%%
import os;
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests

# Load local key and data
root_dir = os.path.abspath(os.path.dirname(__file__));
key_dir = root_dir + "/../mykey/Trello_Key.json";

with open(key_dir,"r") as load_f:
    data = json.load(load_f);

info = data["OKR_EXCEL"]
header = info["HEADER"]
trelloData = data["20_CO_SPRINT_TRELLO"]

board_id = trelloData["BOARD_ID"]

header_obj = header['COL_B']
header_KR = header['COL_C']
header_task = header['COL_D']
header_isDelete = header["COL_G"]
header_NoteInTrello = header["COL_F"]
header_isTarget = header["COL_E"]

labelTable = {}

#%%
# Setting Google API info and call Google Sheet API
# Need to do "pip install --upgrade google-api-python-client oauth2client gspread" in env
# Need to set service account in Google API console
# Then share sheet to this service account.
# reference: https://missterhao.me/2019/01/05/python-google-sheet-crud2/ 
GServiceKey_dir = root_dir + "/../myKey/googleAPIKey.json";
scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(GServiceKey_dir, scope)
client = gspread.authorize(creds)

spreadSheet = client.open(info["NAME"]);
sheet = spreadSheet.worksheet(info["SHEET1"])

sheet_all_data = sheet.get_all_records()

#%%
def list_card():
    
    API_LIST_CARD = "https://api.trello.com/1/boards/{}/cards".format(board_id)

    queryString = {
        "key": trelloData["API_KEY"],
        "token": trelloData["ACCESS_TOKEN"]
    }

    response = requests.get(API_LIST_CARD,params=queryString)
    responseJSON = response.json()

    return responseJSON

#%%
def list_label():
    API_LIST_LABEL = "https://api.trello.com/1/boards/{}/labels".format(board_id)
    queryString = {
        "fields":"all",
        "key": trelloData["API_KEY"],
        "token": trelloData["ACCESS_TOKEN"]
    }

    response = requests.get(API_LIST_LABEL,params=queryString)
    responseJSON = response.json()
    
    return responseJSON

#%%
# access token is generated by this url
# https://trello.com/1/connect?key=yourkey&expiration=never&response_type=token&scope=read,write

def create_card(labelIDArr):
    API_CREATE_CARD = "https://api.trello.com/1/cards"
    name = "【" + labelIDArr["KR"] + "】" + labelIDArr["task"]
    
    queryString = {
        "idList": trelloData["LIST"]["TASK"],
        "key": trelloData["API_KEY"],
        "token": trelloData["ACCESS_TOKEN"],
        "name": name,
        "idMembers": trelloData["MY_TAG_ID"],
        "idLabels": labelIDArr["label"],
        "desc": "Created from my Code..."
    }

    response = requests.post(API_CREATE_CARD,params=queryString)

    print(response.text)

#%%
def mapLabelToTable():
    allLabel = list_label()
    for label in allLabel:
        print(label)
        labelTable[label["name"]] = label["id"]

#%%
def getLabel(txt,isObj=False):
    if(isObj == True):
        txt = "obj-" + txt
    return labelTable[txt]

#%%
# get all label from board and set the absolute label because of the same list
mapLabelToTable()
labKR = getLabel("Key result")


#%%
# List all card I needed from google sheet...

needCreateList = []
for rows in sheet_all_data:
    if(rows[header_obj] != ""):
        temp_objTitle = rows[header_obj]
        
    if (rows[header_isDelete] == "FALSE"):
        if(rows[header_isTarget] == "isTarget"):
            # print(f"OBJ : {temp_objTitle}")
            # print(f"KR: {rows[header_KR]}")
            # print("==TASK==")
            temp = rows[header_task]
            tmp = temp.split("\n",-1)
            for tasks in tmp:
                perTask = tasks[2:]
                # print(perTask)
                lab = getLabel(temp_objTitle,True)
                needCreateList.append({
                    "KR": rows[header_KR],
                    "task": perTask,
                    "label": [lab,labKR]})
            # print("\n")

needCreateList

#%%
# Execute create all card I needed...

for item in needCreateList:
    create_card(item)

print("\n===Finish!!===\n")


#%% 